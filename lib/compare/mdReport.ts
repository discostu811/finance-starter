
import * as fs from "fs";
import * as path from "path";

export type Table = { headers: string[]; rows: Array<Array<string|number>> };

function toCSV(table: Table): string {
  const esc = (v: any) => {
    if (v === null || typeof v === "undefined") return "";
    const s = String(v);
    if (/[",\n]/.test(s)) return '"' + s.replace(/"/g, '""') + '"';
    return s;
  };
  const lines = [
    table.headers.map(esc).join(","),
    ...table.rows.map(r => r.map(esc).join(","))
  ];
  return lines.join("\n") + "\n";
}

export function writeCSVs(outDir: string, computed: Table, detail: Table, delta: Table) {
  fs.mkdirSync(outDir, { recursive: true });
  fs.writeFileSync(path.join(outDir, "computed-2024.csv"), toCSV(computed), "utf8");
  fs.writeFileSync(path.join(outDir, "detail-2024.csv"), toCSV(detail), "utf8");
  fs.writeFileSync(path.join(outDir, "delta-2024.csv"), toCSV(delta), "utf8");
}

export function writeMarkdownReport(outFile: string, computed: Table, detail: Table, delta: Table, logs: string[]) {
  const dir = path.dirname(outFile);
  fs.mkdirSync(dir, { recursive: true });
  const renderTable = (title: string, t: Table) => {
    const head = "| " + t.headers.join(" | ") + " |\n" + "| " + t.headers.map(()=>"---").join(" | ") + " |\n";
    const body = t.rows.map(r => "| " + r.map(v => String(v)).join(" | ") + " |").join("\n");
    return `\n## ${title}\n\n` + head + body + "\n";
  };
  const md = [
    "# Reconciliation 2024 — Computed vs Detail",
    "### Logs",
    "```",
    ...logs,
    "```",
    renderTable("Computed (from transactions)", computed),
    renderTable("Detail (from workbook)", detail),
    renderTable("Delta (Computed − Detail)", delta),
    "\n_Generated by finance-v0.1b4_\n"
  ].join("\n");
  fs.writeFileSync(outFile, md, "utf8");
}
