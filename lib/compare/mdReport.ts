/* 
version: finance-v0.1b4-patch7
date: 2025-08-27 21:34 Europe/London
changelog: Implement stable CSV + Markdown report writer (no ellipses), used by recon:2024.
*/

import * as fs from "fs";
import * as path from "path";

export type Table = { headers: string[]; rows: Array<Array<string|number>> };

function toCSV(table: Table): string {
  const esc = (v: any) => {
    if (v === null || typeof v === "undefined") return "";
    const s = String(v);
    if (/[",\n]/.test(s)) return '"' + s.replace(/"/g, '""') + '"';
    return s;
  };
  const lines = [
    table.headers.map(esc).join(","),
    ...table.rows.map(r => r.map(esc).join(","))
  ];
  return lines.join("\n") + "\n";
}

function renderTable(title: string, t: Table): string {
  const sep = "|" + t.headers.map(() => "---").join("|") + "|";
  const header = "|" + t.headers.join("|") + "|";
  const body = t.rows.map(r => "|" + r.map(v => String(v)).join("|") + "|").join("\n");
  return `\n### ${title}\n\n${header}\n${sep}\n${body}\n`;
}

export function makeDelta(computed: Table, detail: Table): Table {
  // assume same shape and header order; fallback-safe
  const headers = computed.headers;
  const rows: Array<Array<string|number>> = [];
  const n = Math.max(computed.rows.length, detail.rows.length);
  for (let i=0; i<n; i++) {
    const a = computed.rows[i] || [];
    const b = detail.rows[i] || [];
    const row: Array<string|number> = [];
    for (let j=0; j<headers.length; j++) {
      const va: any = a[j] ?? "";
      const vb: any = b[j] ?? "";
      if (j < 2) {
        // Year/Month or similar label columns: copy from computed
        row.push(va);
      } else {
        const na = typeof va === "number" ? va : parseFloat(String(va)) || 0;
        const nb = typeof vb === "number" ? vb : parseFloat(String(vb)) || 0;
        const d = +(na - nb).toFixed(2);
        row.push(d);
      }
    }
    rows.push(row);
  }
  return { headers, rows };
}

export function writeCSVs(paths: {computed: string; detail: string; delta: string}, computed: Table, detail: Table, delta: Table): void {
  fs.mkdirSync(path.dirname(paths.computed), { recursive: true });
  fs.writeFileSync(paths.computed, toCSV(computed), "utf8");
  fs.writeFileSync(paths.detail, toCSV(detail), "utf8");
  fs.writeFileSync(paths.delta, toCSV(delta), "utf8");
}

export function writeMarkdownReport(outFile: string, computed: Table, detail: Table, delta: Table, opts: { title?: string } = {}): void {
  const logs: string[] = [
    "Report generated by " + "finance-v0.1b4-patch7",
    "Source: Savings.xlsx 'Detail' (12 months x categories)",
    "Household convention: spend positive, income negative."
  ];
  const title = opts.title || "Reconciliation";
  const md = [
    `# ${title}`,
    "### Logs",
    "```",
    ...logs,
    "```",
    renderTable("Computed (from transactions)", computed),
    renderTable("Detail (from workbook)", detail),
    renderTable("Delta (Computed âˆ’ Detail)", delta),
    "\n_Generated by finance-v0.1b4-patch7_\n"
  ].join("\n");
  fs.mkdirSync(path.dirname(outFile), { recursive: true });
  fs.writeFileSync(outFile, md, "utf8");
}
